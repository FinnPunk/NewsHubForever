// VK API Integration –¥–ª—è NewsHub
// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

class VKApiClient {
    constructor() {
        // –í–µ—Ä—Å–∏—è VK API
        this.apiVersion = '5.131';
        
        // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        this.baseUrl = 'https://api.vk.com/method';
        
        // –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –±–µ—Ä–µ—Ç—Å—è –∏–∑ CONFIG –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        // –ï—Å–ª–∏ CONFIG –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä
        this.groups = window.CONFIG?.vkGroups || [
            { id: 'habr', name: 'Habr', category: 'tech', url: 'https://vk.com/habr' },
            { id: 'tproger', name: '–¢–∏–ø–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', category: 'tech', url: 'https://vk.com/tproger' },
            { id: 'proglib', name: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞', category: 'tech', url: 'https://vk.com/proglib' },
        ];
        
        console.log(`üì± VK API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å ${this.groups.length} –≥—Ä—É–ø–ø–∞–º–∏`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∫–æ–≥–¥–∞ CONFIG –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
        this.updateGroupsFromConfig();
        
        this.cache = new Map();
        this.cacheTimeout = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
        this.isLoading = false;
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤
        this.requestQueue = [];
        this.isProcessingQueue = false;
        this.requestDelay = 350; // 350–º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (VK –ª–∏–º–∏—Ç ~3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É)
        
        // Service Token –¥–ª—è VK API
        this.serviceToken = localStorage.getItem('vk_service_token') || 'b497266db497266db497266d25b7ac2746bb497b497266ddc4a0f620a0b8b417e9dc4aa';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∏–∑ CONFIG
     */
    updateGroupsFromConfig() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å, –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ª–∏ CONFIG
        const checkConfig = () => {
            if (window.CONFIG?.vkGroups && window.CONFIG.vkGroups.length > this.groups.length) {
                console.log(`üì± –û–±–Ω–æ–≤–ª—è–µ–º VK –≥—Ä—É–ø–ø—ã –∏–∑ CONFIG: ${this.groups.length} ‚Üí ${window.CONFIG.vkGroups.length}`);
                this.groups = window.CONFIG.vkGroups;
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º RSS Aggregator –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                if (window.rssAggregator) {
                    window.rssAggregator.vkApi = this;
                }
            } else if (!window.CONFIG) {
                // CONFIG –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                setTimeout(checkConfig, 100);
            }
        };
        
        checkConfig();
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã
     */
    async queueRequest(requestFunction) {
        return new Promise((resolve, reject) => {
            this.requestQueue.push({
                execute: requestFunction,
                resolve: resolve,
                reject: reject
            });
            
            this.processQueue();
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
     */
    async processQueue() {
        if (this.isProcessingQueue || this.requestQueue.length === 0) {
            return;
        }
        
        this.isProcessingQueue = true;
        
        while (this.requestQueue.length > 0) {
            const request = this.requestQueue.shift();
            
            try {
                const result = await request.execute();
                request.resolve(result);
            } catch (error) {
                request.reject(error);
            }
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ VK API
            if (this.requestQueue.length > 0) {
                await new Promise(resolve => setTimeout(resolve, this.requestDelay));
            }
        }
        
        this.isProcessingQueue = false;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã
     * @param {string} groupId - ID –∏–ª–∏ screen_name –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'habr')
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 100)
     * @param {number} offset - –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –ø–æ—Å—Ç–æ–≤
     */
    async getGroupPosts(groupId, count = 20, offset = 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        const cacheKey = `${groupId}_${count}_${offset}`;
        const cached = this.cache.get(cacheKey);
        if (cached && (Date.now() - cached.timestamp) < this.cacheTimeout) {
            console.log(`üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${groupId}`);
            return cached.data;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã
        return this.queueRequest(async () => {
            try {
                console.log(`üì± –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ ${groupId} (–æ—á–µ—Ä–µ–¥—å: ${this.requestQueue.length})`);
                
                const params = new URLSearchParams({
                    domain: groupId,          // screen_name –≥—Ä—É–ø–ø—ã
                    count: count,
                    offset: offset,
                    filter: 'owner',          // —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    access_token: this.serviceToken,  // Service Token
                    v: this.apiVersion
                });
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSONP –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
                const response = await this.jsonpRequest(
                    `${this.baseUrl}/wall.get?${params.toString()}`
                );
            
            if (response.error) {
                const errorCode = response.error.error_code;
                const errorMsg = response.error.error_msg;
                
                if (errorCode === 100) {
                    console.warn(`‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ "${groupId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
                } else if (errorCode === 15) {
                    console.warn(`‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ "${groupId}" –∑–∞–ø—Ä–µ—â–µ–Ω`);
                } else {
                    console.error(`‚ùå VK API Error –¥–ª—è "${groupId}":`, errorMsg);
                }
                return [];
            }
            
                const posts = response.response?.items || [];
                const transformedPosts = this.transformPosts(posts, groupId);
                
                // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                this.cache.set(cacheKey, {
                    data: transformedPosts,
                    timestamp: Date.now()
                });
                
                return transformedPosts;
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ ${groupId}:`, error);
                return [];
            }
        });
    }
    
    /**
     * JSONP –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
     */
    jsonpRequest(url) {
        return new Promise((resolve, reject) => {
            const callbackName = `vk_callback_${Date.now()}`;
            
            window[callbackName] = (data) => {
                delete window[callbackName];
                document.body.removeChild(script);
                resolve(data);
            };
            
            const script = document.createElement('script');
            script.src = `${url}&callback=${callbackName}`;
            script.onerror = () => {
                delete window[callbackName];
                document.body.removeChild(script);
                reject(new Error('JSONP request failed'));
            };
            
            document.body.appendChild(script);
            
            // Timeout —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                if (window[callbackName]) {
                    delete window[callbackName];
                    document.body.removeChild(script);
                    reject(new Error('JSONP request timeout'));
                }
            }, 10000);
        });
    }
    
    /**
     * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ VK –≤ —Ñ–æ—Ä–º–∞—Ç NewsHub
     */
    transformPosts(posts, groupId) {
        const group = this.groups.find(g => g.id === groupId) || { name: groupId, category: 'general' };
        
        return posts.map(post => {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            let text = post.text || '';
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–æ—Å—Ç–∞
            let image = null;
            let images = [];
            try {
                if (post.attachments && Array.isArray(post.attachments) && post.attachments.length > 0) {
                    const photoAttachments = post.attachments.filter(a => a && a.type === 'photo');
                    
                    if (photoAttachments.length > 0) {
                        photoAttachments.forEach(photoAttachment => {
                            if (photoAttachment.photo) {
                                const photo = photoAttachment.photo;
                                let photoUrl = null;
                                
                                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                if (photo.sizes && Array.isArray(photo.sizes) && photo.sizes.length > 0) {
                                    // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                                    const maxSize = photo.sizes.reduce((max, size) => {
                                        if (!size || !size.width || !size.url) return max;
                                        return size.width > (max?.width || 0) ? size : max;
                                    }, null);
                                    photoUrl = maxSize?.url || null;
                                } else if (photo.photo_604) {
                                    photoUrl = photo.photo_604;
                                } else if (photo.photo_320) {
                                    photoUrl = photo.photo_320;
                                } else if (photo.photo_130) {
                                    photoUrl = photo.photo_130;
                                }
                                
                                if (photoUrl) {
                                    images.push(photoUrl);
                                    // –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º
                                    if (!image) {
                                        image = photoUrl;
                                    }
                                }
                            }
                        });
                    }
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ ${post.id}:`, error);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
            const postUrl = `https://vk.com/${group.id}?w=wall${post.owner_id}_${post.id}`;
            
            return {
                id: `vk_${group.id}_${post.id}`,
                title: text.substring(0, 100) + (text.length > 100 ? '...' : ''),
                description: text.substring(0, 300) + (text.length > 300 ? '...' : ''),
                text: text, // –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
                link: postUrl,
                url: postUrl, // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                image: image,
                photo: image, // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                images: images, // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                publishedAt: new Date(post.date * 1000),
                publishedDate: new Date(post.date * 1000).toISOString(), // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                date: new Date(post.date * 1000), // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                source: group.name,
                sourceType: 'vk',
                category: group.category,
                readingTime: Math.ceil(text.length / 1000),
                likes: post.likes?.count || 0,
                views: post.views?.count || 0,
                comments: post.comments?.count || 0,
                isVKPost: true,
                owner_id: post.owner_id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ ID
                groupName: group.name
            };
        });
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ N —Å–∏–º–≤–æ–ª–æ–≤)
     */
    extractTitle(text) {
        if (!text) return '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
        const firstLine = text.split('\n')[0];
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        return firstLine.length > 100 
            ? firstLine.substring(0, 100) + '...' 
            : firstLine || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';
    }
    
    /**
     * –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
     */
    cleanText(text) {
        return text
            .replace(/\[.*?\|.*?\]/g, '') // –£–¥–∞–ª—è–µ–º VK mentions [id123|Name]
            .replace(/#\S+/g, '')         // –£–¥–∞–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
            .substring(0, 300)            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            .trim();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
     */
    async fetchAllPosts(count = 10) {
        if (this.isLoading) {
            console.log('VK API: –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –∏–¥–µ—Ç');
            return [];
        }
        
        this.isLoading = true;
        const allPosts = [];
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (rate limiting)
            for (const group of this.groups) {
                try {
                    const posts = await this.getGroupPosts(group.id, count);
                    allPosts.push(...posts);
                    
                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (VK –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 3 req/sec)
                    await this.delay(350);
                    
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ ${group.name}:`, error);
                }
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            allPosts.sort((a, b) => 
                new Date(b.publishedAt) - new Date(a.publishedAt)
            );
            
            return allPosts;
            
        } finally {
            this.isLoading = false;
        }
    }
    
    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limiting
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    /**
     * –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
     */
    async searchPosts(query, count = 20) {
        // VK API –º–µ—Ç–æ–¥ wall.search (—Ç—Ä–µ–±—É–µ—Ç access_token)
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        
        const allPosts = await this.fetchAllPosts(50);
        
        return allPosts.filter(post => 
            post.title.toLowerCase().includes(query.toLowerCase()) ||
            post.description.toLowerCase().includes(query.toLowerCase())
        ).slice(0, count);
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –≥—Ä—É–ø–ø—ã
     */
    addGroup(groupId, name, category = 'general') {
        this.groups.push({ id: groupId, name, category });
        this.saveGroups();
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
     */
    removeGroup(groupId) {
        this.groups = this.groups.filter(g => g.id !== groupId);
        this.saveGroups();
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
     */
    saveGroups() {
        try {
            localStorage.setItem('vk_groups', JSON.stringify(this.groups));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø VK:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
     */
    loadGroups() {
        try {
            const saved = localStorage.getItem('vk_groups');
            if (saved) {
                this.groups = JSON.parse(saved);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø VK:', error);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return {
            totalGroups: this.groups.length,
            enabledGroups: this.groups.length,
            categories: [...new Set(this.groups.map(g => g.category))]
        };
    }
}

export default VKApiClient;
