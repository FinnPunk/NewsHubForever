// News Card Renderer –¥–ª—è NewsHub
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Å—Ç–∏–ª–µ LinkedIn

class NewsCardRenderer {
    constructor() {
        this.savedItems = new Set(this.loadSavedItems());
        this.readItems = new Set(this.loadReadItems());
        this.init();
    }
    
    init() {
        this.setupEventListeners();
    }
    
    setupEventListeners() {
        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        document.addEventListener('click', (e) => {
            if (e.target.closest('.save-btn')) {
                e.preventDefault();
                const articleId = e.target.closest('.news-card').dataset.articleId;
                window.toggleSave(articleId);
            }
            
            if (e.target.closest('.share-btn')) {
                e.preventDefault();
                const articleId = e.target.closest('.news-card').dataset.articleId;
                this.shareArticle(articleId);
            }
            
            // –ö–ª–∏–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∫–∞—Ä—Ç–æ—á–∫–∏ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            if (e.target.closest('.news-card-clickable') || e.target.closest('.news-title')) {
                e.preventDefault();
                const card = e.target.closest('.news-card');
                const articleId = card ? card.dataset.articleId : null;
                if (articleId) {
                    window.openArticleModal(articleId);
                }
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.addEventListener('keydown', (e) => {
            if (e.target.classList.contains('news-card-clickable') && (e.key === 'Enter' || e.key === ' ')) {
                e.preventDefault();
                const card = e.target.closest('.news-card');
                const articleId = card ? card.dataset.articleId : null;
                if (articleId) {
                    window.openArticleModal(articleId);
                }
            }
        });
    }
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏
    renderCard(article) {
        const isRead = this.readItems.has(article.id);
        const isSaved = this.savedItems.has(article.id);
        const timeAgo = this.formatTimeAgo(article.publishedAt);
        const sourceType = article.source.type || (article.isVKPost ? 'vk' : 'rss');
        
        return `
            <article class="news-card ${isRead ? 'read' : ''}" data-article-id="${article.id}" data-source-type="${sourceType}">
                <div class="news-card-header">
                    <div class="source-info">
                        <div class="source-avatar">
                            <span class="source-icon">${this.getSourceIcon(article.source.category)}</span>
                        </div>
                        <div class="source-details">
                            <span class="source-name">${article.source.name}</span>
                            <span class="publish-time">${timeAgo}</span>
                        </div>
                    </div>
                    <div class="article-actions">
                        <button class="action-btn like-btn" title="–õ–∞–π–∫" data-article-id="${article.id}" data-likes="${article.likes || 0}">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                            </svg>
                            <span class="like-count">${article.likes || 0}</span>
                        </button>
                        <button class="action-btn save-btn ${isSaved ? 'saved' : ''}" 
                                title="${isSaved ? '–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M17 3H7c-1.1 0-2 .9-2 2v16l7-3 7 3V5c0-1.1-.9-2-2-2z"/>
                            </svg>
                        </button>
                        <button class="action-btn share-btn" title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92s2.92-1.31 2.92-2.92-1.31-2.92-2.92-2.92z"/>
                            </svg>
                        </button>
                        <button class="action-btn read-more-btn" title="–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é" data-article-id="${article.id}">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                            </svg>
                        </button>
                    </div>
                </div>
                
                <div class="news-card-content" data-article-url="${article.link}">
                    <div class="news-card-clickable" role="button" tabindex="0">
                        <h3 class="news-title">${this.escapeHtml(article.title)}</h3>
                        ${article.description ? `
                            <p class="news-description">${this.escapeHtml(this.truncateText(article.description, 150))}</p>
                        ` : ''}
                    </div>
                </div>
                
                <div class="news-card-footer">
                    <div class="article-meta">
                        <span class="category-tag ${article.category}">${this.getCategoryName(article.category)}</span>
                        <span class="reading-time">${article.readingTime} –º–∏–Ω —á—Ç–µ–Ω–∏—è</span>
                        ${article.aiSummary ? '<span class="ai-badge">AI</span>' : ''}
                        ${article.isFallback ? '<span class="demo-badge">DEMO</span>' : ''}
                    </div>
                    <div class="engagement-stats">
                        <span class="stat-item">
                            <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                            </svg>
                            <span class="stat-count">${this.generateViewCount()}</span>
                        </span>
                    </div>
                </div>
                
                ${!isRead ? '<div class="unread-indicator"></div>' : ''}
            </article>
        `;
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
    renderCards(articles, container) {
        if (!container) {
            return;
        }
        
        if (!articles || articles.length === 0) {
            container.innerHTML = this.renderEmptyState();
        }
        
        const cardsHTML = articles.map(article => this.renderCard(article)).join('');
        container.innerHTML = cardsHTML;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        articles.forEach((article, index) => {
            const card = container.children[index];
            this.attachEventListeners(card, article);
        });
        
        return card;
    }
        
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–¥–ª—è infinite scroll)
    appendCards(articles, container) {
        if (!articles || articles.length === 0) return;
        
        const fragment = document.createDocumentFragment();
        const tempDiv = document.createElement('div');
// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        
        articles.forEach(article => {
            tempDiv.innerHTML = this.renderCard(article);
            const cardElement = tempDiv.firstElementChild;
            fragment.appendChild(cardElement);
        });
        
        container.appendChild(fragment);
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        const newCards = container.querySelectorAll('.news-card:not(.animated)');
        this.animateNewCards(newCards);
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    renderEmptyState() {
        return `
            <div class="empty-state">
                <div class="empty-icon">üì∞</div>
                <h3>–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
                <button class="btn btn--primary" onclick="location.reload()">
                    –û–±–Ω–æ–≤–∏—Ç—å
                </button>
            </div>
        `;
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ skeleton loading
    renderSkeleton(count = 5) {
        const skeletons = Array(count).fill(null).map(() => `
            <div class="news-card skeleton">
                <div class="news-card-header">
                    <div class="source-info">
                        <div class="skeleton-avatar"></div>
                        <div class="skeleton-text skeleton-source"></div>
                    </div>
                </div>
                <div class="news-card-content">
                    <div class="skeleton-text skeleton-title"></div>
                    <div class="skeleton-text skeleton-title short"></div>
                    <div class="skeleton-text skeleton-description"></div>
                    <div class="skeleton-text skeleton-description short"></div>
                </div>
                <div class="news-card-footer">
                    <div class="skeleton-text skeleton-meta"></div>
                </div>
            </div>
        `).join('');
        
        return skeletons;
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    animateCards(container) {
        const cards = container.querySelectorAll('.news-card:not(.skeleton)');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                card.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
                card.classList.add('animated');
            }, index * 50);
        });
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    animateNewCards(cards) {
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                card.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
                card.classList.add('animated');
            }, index * 100);
        });
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    getSourceIcon(category) {
        const icons = {
            tech: 'üíª',
            business: 'üíº',
            general: 'üì∞',
            startup: 'üöÄ',
            design: 'üé®',
            marketing: 'üìà',
            finance: 'üí∞'
        };
        return icons[category] || 'üì∞';
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getCategoryName(category) {
        const names = {
            tech: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            business: '–ë–∏–∑–Ω–µ—Å',
            general: '–û–±—â–µ–µ',
            startup: '–°—Ç–∞—Ä—Ç–∞–ø—ã',
            design: '–î–∏–∑–∞–π–Ω',
            marketing: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
            finance: '–§–∏–Ω–∞–Ω—Å—ã'
        };
        return names[category] || '–ù–æ–≤–æ—Å—Ç–∏';
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    formatTimeAgo(date) {
        const now = new Date();
        const diffMs = now - date;
        const diffMins = Math.floor(diffMs / 60000);
        const diffHours = Math.floor(diffMs / 3600000);
        const diffDays = Math.floor(diffMs / 86400000);
        
        if (diffMins < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
        if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
        
        return date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'short'
        });
    }
    
    // –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞
    truncateText(text, maxLength) {
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength).trim() + '...';
    }
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—Ç–∞—Ç—å–∏
    openArticleModal(articleId) {
        // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (typeof window.openArticleModal === 'function') {
            window.openArticleModal(articleId);
        } else {
            // Fallback - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.createSimpleModal(articleId);
        }
        
        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        this.markAsRead(articleId);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    createSimpleModal(articleId) {
        const card = document.querySelector(`[data-article-id="${articleId}"]`);
        if (!card) return;
        
        const title = card.querySelector('.news-title').textContent;
        const description = card.querySelector('.news-description')?.textContent || '';
        const articleUrl = card.querySelector('.news-card-content').dataset.articleUrl;
        const source = card.querySelector('.source-name').textContent;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-backdrop"></div>
            <div class="modal-content">
                <div class="modal-header">
                    <h3>${this.escapeHtml(title)}</h3>
                    <button class="modal-close">√ó</button>
                </div>
                <div class="modal-body">
                    <div class="article-meta">
                        <span class="source-name">${this.escapeHtml(source)}</span>
                    </div>
                    <div class="article-content">
                        <p>${this.escapeHtml(description)}</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn--outline modal-close">–ó–∞–∫—Ä—ã—Ç—å</button>
                    <button class="btn btn--primary" onclick="window.open('${articleUrl}', '_blank')">
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç–∞—Ç—å–µ
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.querySelectorAll('.modal-close, .modal-backdrop').forEach(el => {
            el.addEventListener('click', () => {
                modal.remove();
            });
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        const handleEscape = (e) => {
            if (e.key === 'Escape') {
                modal.remove();
                document.removeEventListener('keydown', handleEscape);
            }
        };
        document.addEventListener('keydown', handleEscape);
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
    generateViewCount() {
        return Math.floor(Math.random() * 1000) + 50;
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    toggleSave(articleId) {
        if (this.savedItems.has(articleId)) {
            this.savedItems.delete(articleId);
            if (typeof window.showToast === 'function') {
                window.showToast('–£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', 'info');
            }
        } else {
            this.savedItems.add(articleId);
            if (typeof window.showToast === 'function') {
                window.showToast('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'success');
            }
        }
        
        this.saveSavedItems();
        this.updateSaveButton(articleId);
        this.updateSavedCount();
    }
    
    // –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    markAsRead(articleId) {
        if (!this.readItems.has(articleId)) {
            this.readItems.add(articleId);
            this.saveReadItems();
            
            const card = document.querySelector(`[data-article-id="${articleId}"]`);
            if (card) {
                card.classList.add('read');
                const indicator = card.querySelector('.unread-indicator');
                if (indicator) {
                    indicator.remove();
                }
            }
        }
    }
    
    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞—Ç—å–µ–π
    shareArticle(articleId) {
        const card = document.querySelector(`[data-article-id="${articleId}"]`);
        if (!card) return;
        
        const title = card.querySelector('.news-title').textContent;
        const link = card.querySelector('.news-card-link').href;
        
        if (navigator.share) {
            navigator.share({
                title: title,
                url: link
            }).catch(() => {});
        } else {
            // Fallback: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            navigator.clipboard.writeText(link).then(() => {
                this.showToast('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
            }).catch(() => {
                this.showToast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'error');
            });
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    updateSaveButton(articleId) {
        const card = document.querySelector(`[data-article-id="${articleId}"]`);
        if (!card) return;
        
        const saveBtn = card.querySelector('.save-btn');
        const isSaved = this.savedItems.has(articleId);
        
        saveBtn.classList.toggle('saved', isSaved);
        saveBtn.title = isSaved ? '–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
    updateSavedCount() {
        const countElement = document.getElementById('savedCount');
        if (countElement) {
            const count = this.savedItems.size;
            countElement.textContent = count;
            countElement.classList.toggle('hidden', count === 0);
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
    saveSavedItems() {
        try {
            localStorage.setItem('saved_articles', JSON.stringify([...this.savedItems]));
        } catch (error) {
            // –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
    loadSavedItems() {
        try {
            const saved = localStorage.getItem('saved_articles');
            return saved ? JSON.parse(saved) : [];
        } catch (error) {
            // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
            return [];
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
    saveReadItems() {
        try {
            localStorage.setItem('read_articles', JSON.stringify([...this.readItems]));
        } catch (error) {
            // –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
    loadReadItems() {
        try {
            const read = localStorage.getItem('read_articles');
            return read ? JSON.parse(read) : [];
        } catch (error) {
            // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
            return [];
        }
    }
    
    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showToast(message, type = 'info') {
        if (window.filterSystem && window.filterSystem.showToast) {
            window.filterSystem.showToast(message, type);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
    getSavedArticles(allArticles) {
        return allArticles.filter(article => this.savedItems.has(article.id));
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
    getUnreadArticles(allArticles) {
        return allArticles.filter(article => !this.readItems.has(article.id));
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    cleanupReadItems() {
        const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000);
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –¥–∞—Ç–∞–º–∏ —Å—Ç–∞—Ç–µ–π
        // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        if (this.readItems.size > 1000) {
            const itemsArray = [...this.readItems];
            this.readItems = new Set(itemsArray.slice(-500));
            this.saveReadItems();
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof window !== 'undefined') {
    window.NewsCardRenderer = NewsCardRenderer;
}
