// Filter System –¥–ª—è NewsHub
// –°–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∫–∞–Ω—Å–∏–π

class FilterSystem {
    constructor() {
        this.filters = {
            sources: new Set(),
            professions: new Set(),
            includeKeywords: [],
            excludeKeywords: [],
            dateRange: 'all',
            enableAI: true,
            enablePersonalization: false
        };
        
        this.availableSources = [
            { id: 'habr', name: 'Habr', url: 'https://habr.com/ru/rss/hub/programming/', enabled: true },
            { id: 'vc', name: 'VC.ru', url: 'https://vc.ru/rss', enabled: true },
            { id: 'tproger', name: 'Tproger', url: 'https://tproger.ru/feed/', enabled: true },
            { id: 'dev', name: 'Dev.to', url: 'https://dev.to/feed', enabled: false },
            { id: 'medium', name: 'Medium', url: 'https://medium.com/feed', enabled: false }
        ];
        
        this.allProfessions = [
            'Frontend Developer', 'Backend Developer', 'Full Stack Developer', 'DevOps Engineer',
            'Data Scientist', 'Machine Learning Engineer', 'Product Manager', 'UX/UI Designer',
            'QA Engineer', 'Mobile Developer', 'System Administrator', 'Database Administrator',
            'Security Engineer', 'Cloud Architect', 'Technical Writer', 'Scrum Master',
            'Business Analyst', 'Project Manager', 'Sales Manager', 'Marketing Manager',
            'HR Manager', 'Financial Analyst', 'Accountant', 'Lawyer', 'Doctor',
            'Teacher', 'Architect', 'Engineer', 'Designer', 'Photographer',
            'Journalist', 'Content Creator', 'Social Media Manager', 'SEO Specialist',
            'Digital Marketer', 'Brand Manager', 'Event Manager', 'Consultant',
            'Analyst', 'Researcher', 'Scientist', 'Pharmacist', 'Nurse',
            'Veterinarian', 'Psychologist', 'Therapist', 'Social Worker', 'Chef',
            'Barista', 'Waiter', 'Retail Manager', 'Sales Associate', 'Customer Service',
            'Support Specialist', 'Translator', 'Interpreter', 'Editor', 'Copywriter',
            'Graphic Designer', 'Web Designer', 'Interior Designer', 'Fashion Designer',
            'Industrial Designer', 'Game Developer', 'Game Designer', 'Animator',
            'Video Editor', 'Sound Engineer', 'Music Producer', 'Artist', 'Musician',
            'Actor', 'Director', 'Producer', 'Screenwriter', 'Cinematographer',
            'Photographer', 'Photo Editor', 'Illustrator', 'Art Director', 'Creative Director',
            'Brand Designer', 'Package Designer', 'Environmental Designer', 'Landscape Architect',
            'Urban Planner', 'Civil Engineer', 'Mechanical Engineer', 'Electrical Engineer',
            'Chemical Engineer', 'Biomedical Engineer', 'Aerospace Engineer', 'Software Engineer',
            'Hardware Engineer', 'Network Engineer', 'Security Analyst', 'Penetration Tester',
            'Ethical Hacker', 'IT Manager', 'CTO', 'CIO', 'CEO', 'COO', 'CFO',
            'VP of Engineering', 'VP of Product', 'VP of Marketing', 'VP of Sales',
            'Director of Operations', 'Operations Manager', 'Supply Chain Manager',
            'Logistics Coordinator', 'Warehouse Manager', 'Quality Assurance Manager',
            'Compliance Officer', 'Risk Manager', 'Investment Banker', 'Financial Advisor',
            'Insurance Agent', 'Real Estate Agent', 'Property Manager', 'Construction Manager',
            'Electrician', 'Plumber', 'Carpenter', 'Mechanic', 'Technician',
            'Maintenance Worker', 'Janitor', 'Security Guard', 'Driver', 'Delivery Person',
            'Pilot', 'Flight Attendant', 'Travel Agent', 'Tour Guide', 'Hotel Manager',
            'Restaurant Manager', 'Event Coordinator', 'Wedding Planner', 'Personal Trainer',
            'Fitness Instructor', 'Yoga Instructor', 'Massage Therapist', 'Beautician',
            'Hair Stylist', 'Makeup Artist', 'Fashion Stylist', 'Personal Shopper',
            'Life Coach', 'Career Coach', 'Executive Coach', 'Mentor', 'Tutor',
            'Librarian', 'Museum Curator', 'Archivist', 'Historian', 'Anthropologist',
            'Sociologist', 'Political Scientist', 'Economist', 'Statistician', 'Mathematician'
        ];
        
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        this.loadSavedFilters();
        this.populateSourcesFilter();
    }
    
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        const addSourceBtn = document.getElementById('addSourceBtn');
        if (addSourceBtn) {
            addSourceBtn.addEventListener('click', () => this.showAddSourceModal());
        }
        
        // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º
        const professionSearch = document.getElementById('professionFilterSearch');
        if (professionSearch) {
            professionSearch.addEventListener('input', (e) => this.searchProfessions(e.target.value));
        }
        
        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        const includeKeywords = document.getElementById('includeKeywords');
        if (includeKeywords) {
            includeKeywords.addEventListener('input', (e) => this.updateKeywords('include', e.target.value));
        }
        
        const excludeKeywords = document.getElementById('excludeKeywords');
        if (excludeKeywords) {
            excludeKeywords.addEventListener('input', (e) => this.updateKeywords('exclude', e.target.value));
        }
        
        // –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const applyFiltersBtn = document.getElementById('applyFiltersBtn');
        if (applyFiltersBtn) {
            applyFiltersBtn.addEventListener('click', () => this.applyFilters());
        }
        
        const resetFiltersBtn = document.getElementById('resetFiltersBtn');
        if (resetFiltersBtn) {
            resetFiltersBtn.addEventListener('click', () => this.resetFilters());
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const closeFiltersModal = document.getElementById('closeFiltersModal');
        if (closeFiltersModal) {
            closeFiltersModal.addEventListener('click', () => this.closeFiltersModal());
        }
        
        // –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –¥–∞—Ç
        const dateFilters = document.querySelectorAll('input[name="dateFilter"]');
        dateFilters.forEach(radio => {
            radio.addEventListener('change', (e) => {
                this.filters.dateRange = e.target.value;
            });
        });
        
        // –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è AI –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const enableAISummary = document.getElementById('enableAISummary');
        if (enableAISummary) {
            enableAISummary.addEventListener('change', (e) => {
                this.filters.enableAI = e.target.checked;
            });
        }
        
        const enablePersonalization = document.getElementById('enablePersonalization');
        if (enablePersonalization) {
            enablePersonalization.addEventListener('change', (e) => {
                this.filters.enablePersonalization = e.target.checked;
            });
        }
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    showAddSourceModal() {
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.id = 'addSourceModal';
        modal.innerHTML = `
            <div class="modal-backdrop"></div>
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üì∞ –î–æ–±–∞–≤–∏—Ç—å RSS –∏—Å—Ç–æ—á–Ω–∏–∫</h3>
                    <button class="modal-close" onclick="this.closest('.modal').remove()">√ó</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="sourceName">–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:</label>
                        <input type="text" id="sourceName" class="form-control" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: TechCrunch">
                    </div>
                    <div class="form-group">
                        <label for="sourceUrl">RSS URL:</label>
                        <input type="url" id="sourceUrl" class="form-control" placeholder="https://example.com/rss">
                    </div>
                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="sourceEnabled" checked>
                            –í–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn--secondary" onclick="this.closest('.modal').remove()">–û—Ç–º–µ–Ω–∞</button>
                    <button class="btn btn--primary" onclick="window.filterSystem.addNewSource()">–î–æ–±–∞–≤–∏—Ç—å</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        modal.style.display = 'flex';
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
        setTimeout(() => {
            document.getElementById('sourceName').focus();
        }, 100);
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π RSS –∏—Å—Ç–æ—á–Ω–∏–∫
    addNewSource() {
        const name = document.getElementById('sourceName').value.trim();
        const url = document.getElementById('sourceUrl').value.trim();
        const enabled = document.getElementById('sourceEnabled').checked;
        
        if (!name || !url) {
            this.showToast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
        try {
            new URL(url);
        } catch {
            this.showToast('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL', 'error');
            return;
        }
        
        const newSource = {
            id: Date.now().toString(),
            name,
            url,
            enabled
        };
        
        this.availableSources.push(newSource);
        this.saveFilters();
        this.populateSourcesFilter();
        
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.getElementById('addSourceModal').remove();
        
        this.showToast(`RSS –∏—Å—Ç–æ—á–Ω–∏–∫ "${name}" –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º
    searchProfessions(query) {
        const suggestions = document.getElementById('professionSuggestions');
        if (!suggestions) return;
        
        if (!query.trim()) {
            suggestions.innerHTML = '';
            suggestions.style.display = 'none';
            return;
        }
        
        const filtered = this.allProfessions.filter(profession => 
            profession.toLowerCase().includes(query.toLowerCase())
        ).slice(0, 10);
        
        if (filtered.length === 0) {
            suggestions.innerHTML = '<div class="no-results">–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        } else {
            suggestions.innerHTML = filtered.map(profession => `
                <div class="profession-suggestion" onclick="window.filterSystem.selectProfession('${profession}')">
                    ${profession}
                </div>
            `).join('');
        }
        
        suggestions.style.display = 'block';
    }
    
    // –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
    selectProfession(profession) {
        if (this.filters.professions.size >= 5) {
            this.showToast('–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 5 –ø—Ä–æ—Ñ–µ—Å—Å–∏–π', 'warning');
            return;
        }
        
        this.filters.professions.add(profession);
        this.updateSelectedProfessions();
        
        // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫
        const searchInput = document.getElementById('professionFilterSearch');
        if (searchInput) {
            searchInput.value = '';
        }
        
        const suggestions = document.getElementById('professionSuggestions');
        if (suggestions) {
            suggestions.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    updateSelectedProfessions() {
        const container = document.getElementById('selectedProfessions');
        if (!container) return;
        
        container.innerHTML = Array.from(this.filters.professions).map(profession => `
            <div class="profession-chip">
                <span>${profession}</span>
                <button onclick="window.filterSystem.removeProfession('${profession}')">√ó</button>
            </div>
        `).join('');
    }
    
    // –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
    removeProfession(profession) {
        this.filters.professions.delete(profession);
        this.updateSelectedProfessions();
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    updateKeywords(type, value) {
        const keywords = value.split(',').map(k => k.trim()).filter(k => k);
        
        if (type === 'include') {
            this.filters.includeKeywords = keywords;
        } else {
            this.filters.excludeKeywords = keywords;
        }
    }
    
    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    populateSourcesFilter() {
        const container = document.getElementById('sourcesFilter');
        if (!container) return;
        
        container.innerHTML = this.availableSources.map(source => `
            <label class="source-checkbox">
                <input type="checkbox" value="${source.id}" ${source.enabled ? 'checked' : ''}>
                <span class="source-name">${source.name}</span>
                <button class="remove-source-btn" onclick="window.filterSystem.removeSource('${source.id}')" title="–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫">√ó</button>
            </label>
        `).join('');
        
        // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        container.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const sourceId = e.target.value;
                const source = this.availableSources.find(s => s.id === sourceId);
                if (source) {
                    source.enabled = e.target.checked;
                    if (e.target.checked) {
                        this.filters.sources.add(sourceId);
                    } else {
                        this.filters.sources.delete(sourceId);
                    }
                }
            });
        });
    }
    
    // –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
    removeSource(sourceId) {
        this.availableSources = this.availableSources.filter(s => s.id !== sourceId);
        this.filters.sources.delete(sourceId);
        this.populateSourcesFilter();
        this.saveFilters();
        this.showToast('RSS –∏—Å—Ç–æ—á–Ω–∏–∫ —É–¥–∞–ª–µ–Ω', 'info');
    }
    
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
    applyFilters() {
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        this.saveFilters();
        
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.closeFiltersModal();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.updateFilterIndicator();
        
        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É (—ç–º—É–ª—è—Ü–∏—è)
        this.filterContent();
        
        this.showToast('–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã', 'success');
    }
    
    // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
    resetFilters() {
        this.filters = {
            sources: new Set(),
            professions: new Set(),
            includeKeywords: [],
            excludeKeywords: [],
            dateRange: 'all',
            enableAI: true,
            enablePersonalization: false
        };
        
        // –°–±—Ä–æ—Å–∏—Ç—å UI
        const form = document.querySelector('#filtersModal form, #filtersModal .modal-body');
        if (form) {
            // –°–±—Ä–æ—Å–∏—Ç—å —á–µ–∫–±–æ–∫—Å—ã –∏ —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏
            form.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                cb.checked = cb.id === 'enableAISummary';
            });
            
            form.querySelectorAll('input[type="radio"][value="all"]').forEach(radio => {
                radio.checked = true;
            });
            
            // –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
            form.querySelectorAll('input[type="text"]').forEach(input => {
                input.value = '';
            });
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        this.updateSelectedProfessions();
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        this.availableSources.forEach(source => {
            source.enabled = ['habr', 'vc', 'tproger'].includes(source.id);
        });
        this.populateSourcesFilter();
        
        this.showToast('–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã', 'info');
    }
    
    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    closeFiltersModal() {
        const modal = document.getElementById('filtersModal');
        if (modal) {
            modal.classList.add('hidden');
            modal.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤
    updateFilterIndicator() {
        const indicator = document.getElementById('filterIndicator');
        if (!indicator) return;
        
        const activeFiltersCount = this.getActiveFiltersCount();
        
        if (activeFiltersCount > 0) {
            indicator.textContent = activeFiltersCount;
            indicator.classList.remove('hidden');
        } else {
            indicator.classList.add('hidden');
        }
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    getActiveFiltersCount() {
        let count = 0;
        
        if (this.filters.sources.size > 0) count++;
        if (this.filters.professions.size > 0) count++;
        if (this.filters.includeKeywords.length > 0) count++;
        if (this.filters.excludeKeywords.length > 0) count++;
        if (this.filters.dateRange !== 'all') count++;
        if (!this.filters.enableAI) count++;
        if (this.filters.enablePersonalization) count++;
        
        return count;
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
    filterContent() {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ localStorage
    saveFilters() {
        const filtersToSave = {
            sources: Array.from(this.filters.sources),
            professions: Array.from(this.filters.professions),
            includeKeywords: this.filters.includeKeywords,
            excludeKeywords: this.filters.excludeKeywords,
            dateRange: this.filters.dateRange,
            enableAI: this.filters.enableAI,
            enablePersonalization: this.filters.enablePersonalization,
            availableSources: this.availableSources
        };
        
        try {
            localStorage.setItem('newshub_filters', JSON.stringify(filtersToSave));
        } catch (error) {
            // –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    loadSavedFilters() {
        try {
            const saved = localStorage.getItem('newshub_filters');
            if (saved) {
                const data = JSON.parse(saved);
                
                this.filters.sources = new Set(data.sources || []);
                this.filters.professions = new Set(data.professions || []);
                this.filters.includeKeywords = data.includeKeywords || [];
                this.filters.excludeKeywords = data.excludeKeywords || [];
                this.filters.dateRange = data.dateRange || 'all';
                this.filters.enableAI = data.enableAI !== undefined ? data.enableAI : true;
                this.filters.enablePersonalization = data.enablePersonalization || false;
                
                if (data.availableSources) {
                    this.availableSources = data.availableSources;
                }
            }
        } catch (error) {
            // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        }
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showToast(message, type = 'info') {
        // –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const toast = document.createElement('div');
        toast.className = `toast toast--${type}`;
        toast.innerHTML = `
            <div class="toast-content">
                <span class="toast-message">${message}</span>
                <button class="toast-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        let container = document.getElementById('toastContainer');
        if (!container) {
            container = document.createElement('div');
            container.id = 'toastContainer';
            container.className = 'toast-container';
            document.body.appendChild(container);
        }
        
        container.appendChild(toast);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (toast.parentElement) {
                toast.remove();
            }
        }, 5000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.filterSystem = new FilterSystem();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FilterSystem;
}
